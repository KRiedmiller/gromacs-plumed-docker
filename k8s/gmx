#!/bin/bash


#XXX
[ -n "$K8S_NS" ] && ns="-n $K8S_NS"

IMAGE=ljocha/gromacs:2021-1

name=$(LC_CTYPE=C tr -cd '0-9a-z' </dev/urandom | head -c 9)
yaml=/tmp/gmx-$name.yaml

CPU=1
GPU=0

if [ "$1" = mdrun -o $(basename $0) = mdrun ]; then
	GPU=1
	thisone=n
	for a in "$@"; do
		if [ $thisone = y ]; then
			CPU=$a
			thisone=n
		fi
		[ $a = -ntomp ] && thisone=y
	done
fi

MEM=$((4 * $CPU))Gi

cat - >$yaml <<EOF
apiVersion: batch/v1
kind: Job
metadata:
  name: gmx-$name
spec:
  ttlSecondsAfterFinished: 20
  template:
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1002
        fsGroup: 1003
      containers:
      - name: gmx
        image: $IMAGE
        resources:
          requests:
            cpu: $CPU
            memory: $MEM
          limits:
            nvidia.com/gpu: $GPU
        volumeMounts:
          - mountPath: /work
            name: chicken-work-volume
        command: [ "gmx" ]
#        command: [ "nvidia-smi" ]
        args:
EOF

for a in "$@"; do
	echo "          - \"$a\"" >>$yaml
done

cat - >>$yaml <<EOF
      restartPolicy: Never
      volumes:
        - name: chicken-work-volume
          persistentVolumeClaim:
            claimName: test-volume
EOF


kubectl apply $ns -f $yaml
# XXX
while kubectl logs job.batch/gmx-$name $ns 2>&1 >/dev/null | grep 'waiting to start'; do sleep 2; done
kubectl logs job.batch/gmx-$name --follow $ns

kubectl delete job.batch/gmx-$name $ns
rm $yaml
